#+TITLE: dev

This was my 1st EarthCube NoteBook, afterwards
[[https://colab.research.google.com/drive/1Np71tY39mTGevFnClTR8Og4bYy25jWS5?userstoinvite=kenton.mchenry%40gmail.com&usp=notify#scrollTo=zV6SLraFwtNK][tried]]
clowder, but have meant to still use this

 

#+BEGIN_SRC python :session :results output
pip install SPARQLWrapper
#+END_SRC

 

#+BEGIN_SRC python :session :results output
from SPARQLWrapper import SPARQLWrapper, JSON
#+END_SRC

created from my github repo (MBcode/ec) that has localhost here

 

#+BEGIN_SRC python :session :results output
import os
my_host = os.getevn('my_host')
base_url = os.getevn('dev_endpoint')
base_url = "http://localhost" 
#+END_SRC

 

#+BEGIN_SRC python :session :results output
endpoint = base_url + ":3030/earthcube/query"
#+END_SRC

 

#+BEGIN_SRC python :session :results output
sparql = SPARQLWrapper(endpoint)
#+END_SRC

 

#+BEGIN_SRC python :session :results output
q = """
PREFIX schema: <http://schema.org/>
select distinct ?s ?o where {
    { ?s schema:description ?o .} UNION
    { ?s schema:keywords ?o .} UNION
    { ?s schema:name ?o .}
    FILTER regex(?o, "nitrogen", "i").
}
"""
#+END_SRC

Change the string in the next cell, to search for other terms.

 

#+BEGIN_SRC python :session :results output
qry_str = "carbon"
#+END_SRC

 

#+BEGIN_SRC python :session :results output
q1 = "PREFIX schema: <http://schema.org/> select distinct ?s ?o where { "
q2 = "{ ?s schema:description ?o .} UNION { ?s schema:keywords ?o .} UNION { ?s schema:name ?o .} FILTER regex(?o,\"" 
q4 = "\", \"i\").  }"
q = q1 + q2 + qry_str + q4
print(q)
#+END_SRC

 

#+BEGIN_SRC python :session :results output
sparql.setQuery(q)
#+END_SRC

 

#+BEGIN_SRC python :session :results output
sparql.setReturnFormat(JSON)
#+END_SRC

 

#+BEGIN_SRC python :session :results output
results = sparql.query().convert()
#+END_SRC

 

#+BEGIN_SRC python :session :results output
##print(results) 
#import json
#print(json.dumps(results, indent=2))
#+END_SRC

 

#+BEGIN_SRC python :session :results output
for result in results["results"]["bindings"]:
    print(result["s"]["value"],result["o"]["value"])
#+END_SRC

 

#+BEGIN_SRC python :session :results output
##pip install json2table
#from json2table import convert
#build_direction = "LEFT_TO_RIGHT"
#table_attributes = {"style" : "width:100%"}
#html = convert(results, build_direction=build_direction, table_attributes=table_attributes)
#print(html)
#+END_SRC

 

#+BEGIN_SRC python :session :results output
#now for output to be clustered by 'brew carrot2' service

cout = """<?xml version="1.0" encoding="UTF-8"?>
<searchresult>
  <query>"""
print(cout,qry_str,"</query>")
i=0
for result in results["results"]["bindings"]:
    print("<document id=\"",i,"\">")
    print("<url>",result["s"]["value"],"</url>")
    print("<snippet>",result["o"]["value"],"</snippet></document>")
    i=i+1
print("</searchresult>")

#+END_SRC

Output of running carrot2(dcs)service,on xml output:
http://isda.ncsa.illinois.edu/~mbobak/png/carbon2.json

Want https://search.carrot2.org/#/search/web/carbon/treemap viz after
sending xml above to clustering service.

Also worth looking at:
https://colab.research.google.com/github/earthcubearchitecture-project418/p418Notebooks/blob/master/Text\_Search\_Simple.ipynb#scrollTo=XebgVAgupxIH

and
https://colab.research.google.com/github/earthcubearchitecture-project418/p418Notebooks/blob/master/Text\_Search\_Widgets.ipynb#scrollTo=iP9efLcO78xi

 

#+BEGIN_SRC python :session :results output
import pandas as pd
#DOIdf = pd.DataFrame(results.items())
#+END_SRC

 

#+BEGIN_SRC python :session :results output
DOIdf = pd.DataFrame(results["results"]["bindings"])
#+END_SRC

 

#+BEGIN_SRC python :session :results output
DOIdf
#+END_SRC
